{"version":3,"file":"static/iframe.cc4877e072b34473b12d.bundle.js","sources":["webpack:///./src/index.js"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Scales text to fit it's container by setting it's viewbox to it's dimensions and\n * than do small position adjustments\n */\nclass FitrSvgText extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tx: this.props.x,\n\t\t\ty: this.props.y,\n\t\t\tviewBox: undefined,\n\t\t\twidth: this.props.width\n\t\t}\n\n\t\tthis.fitSvg = this.fitSvg.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.setState(() => this.getNewDimensions());\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tif (this.props.text !== prevProps.text) {\n\t\t\tthis.setState(() => this.getNewDimensions());\n\t\t}\n\t}\n\n\tgetNewDimensions() {\n\t\tconst textWidth = this.text.getBBox().width; // default text width\n\t\tconst textHeight = this.text.getBBox().height; // default text height\n\n\t\treturn this.fitSvg(textWidth, textHeight, this.props.width, this.props.maxHeight);\n\t}\n\n\t/**\n\t * Sets default text width and height as viewbox so text proportions can be kept, while\n\t * reseting viewbox to be exactly same as current text size.\n\t * It also sets y coord because text gets verticaly aligned after reseting viewbox. Why?\n\t * @param {number} textWidth text width with default font size and viewbox\n\t * @param {number} textHeight text height with default font size and viewbox\n\t * @param {number} width wanted textWidth set in props\n\t * @param {number} maxHeight wanted max height set in props when name is for example few chars\n\t */\n\tfitSvg(textWidth, textHeight, width, maxHeight) {\n\t\tlet height = width * textHeight / textWidth; // scalled text height\n\n\t\tif (height > maxHeight) {\n\t\t\theight = maxHeight;\n\t\t\twidth = height * textWidth / textHeight;\n\t\t}\n\n\t\t// after viewbox reset we have to calculate text to top distance to be able to reposition\n\t\tconst topOffset = (this.props.parentSvgHeight - height) / 2; // TODO 200 is hardcoded container svg height. Fix it!\n\n\t\t// this is offset so that text is not cropped after viewbox readjustment if it is for example centered\n\t\tlet viewBoxX = 0;\n\n\t\t// x have to be moved depending on textAnchor. If not than the viewBox can crops the text\n\t\tlet x = this.props.x; // textAnchor === 'start'\n\n\t\tif (this.props.textAnchor === 'middle') {\n\t\t\tviewBoxX = -(textWidth / 2);\n\t\t\tx = this.props.x - width / 2;\n\t\t}\n\t\tif (this.props.textAnchor === 'end') {\n\t\t\tviewBoxX = -textWidth;\n\t\t\tx = this.props.x - width;\n\t\t}\n\n\t\treturn {\n\t\t\tviewBox: `${viewBoxX}, 0, ${textWidth}, ${textHeight}`,\n\t\t\tx: x,\n\t\t\ty: this.props.y - topOffset,\n\t\t\twidth: width\n\t\t};\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<svg\n\t\t\t\tref={node => this.positioner = node}\n\t\t\t\twidth={this.state.width} x={this.state.x} y={this.state.y}\n\t\t\t>\n\t\t\t\t<svg viewBox={this.state.viewBox} >\n\t\t\t\t\t<text\n\t\t\t\t\t\tclassName={this.props.textClassName}\n\t\t\t\t\t\tref={node => this.text = node}\n\t\t\t\t\t\tstyle={{ textAnchor: this.props.textAnchor }}\n\t\t\t\t\t>\n\t\t\t\t\t\t{this.props.text}\n\t\t\t\t\t</text>\n\t\t\t\t</svg>\n\t\t\t</svg>\n\t\t);\n\t}\n};\n\nFitrSvgText.propTypes = {\n\ttextClassName: PropTypes.string,\n\ttext: PropTypes.string.isRequired,\n\ttextAnchor: PropTypes.oneOf(['start', 'middle', 'end']),\n\tx: PropTypes.number.isRequired,\n\ty: PropTypes.number.isRequired,\n\twidth: PropTypes.number.isRequired,\n\tmaxHeight: PropTypes.number.isRequired,\n\tparentSvgHeight: PropTypes.number.isRequired\n};\n\nFitrSvgText.displayName = 'FitrSvgText';\n\nexport default FitrSvgText;"],"mappings":"AAOA","sourceRoot":""}